# encoder 
encoder.thread.pool.size=2
encoder.thread.pool.queue=100
encoder.timeout=3

bpeg.encoder.command.path=/usr/local/bin/bpgenc

# async thread pool
aync.thread.pool.size=1
aync.thread.pool.queue=1000

# file size
multipart.maxFileSize: 10000KB
multipart.maxRequestSize: 10000KB


upload.dir=file:/usr/local/exploitation/bpg-generator/data/upload/
output.dir=file:/usr/local/exploitation/bpg-generator/data/output/

session.max.upload=10

data.remove=true
data.remove.delay=15
data.remove.retry=1



hash.seed=bpg-data

# log file
logging.config=classpath:logback.xml

# tomcat properties
server.port=8090
server.session-timeout=180
#server.tomcat.remote_ip_header=x-forwarded-for
#server.tomcat.protocol_header=x-forwarded-proto

# freemarker templates
spring.freemarker.template-loader-path=classpath:/templates/
spring.freemarker.cache=false

# dev tools
spring.devtools.restart.exclude=static/**,public/**,templates/**

# spring database
spring.datasource.plaform=h2

#######################################
# SPRING BATCH (BatchProperties)
spring.batch.enabled=false
# Create the required batch tables on startup if necessary.
spring.batch.initializer.enabled=true 
# Execute all Spring Batch jobs in the context on startup.
spring.batch.job.enabled=false 
# Comma-separated list of job names to execute on startup (For instance `job1,job2`). By default, all Jobs found in the context are executed.
# spring.batch.job.names= 
#spring.batch.schema=classpath:org/springframework/batch/core/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.
#spring.batch.table-prefix= # Table prefix for all the batch meta-data tables.


# JOOQ
spring.jooq.sql-dialect=h2

appName=bpg-generator
appVersion=0.0.12
buildTimestamp=

